package com.redhat.weightwatcher;

import org.codehaus.jackson.node.ObjectNode;
import org.codehaus.jackson.map.ObjectMapper;
import java.util.Date; 
import java.text.SimpleDateFormat;
 
import com.redhat.weightwatcher.Observation;
import com.redhat.weightwatcher.GAS;

global java.util.HashMap output;
global SimpleDateFormat inSDF;
global SimpleDateFormat outSDF;

rule "ruleBestCount"
  	salience -100
  	no-loop true
when
    	$participant : Participant(  )
	$gas : GAS( userid == $participant.userid )
    	$obscounttotal : Number( intValue > 0) from accumulate(
      		Observation( $obscount : obsvalue == 2, $participant.userid == userid, obsname == $gas.goalname ) over window:time( 60d ),
     		count( $obscount ) )
then
    	Date today = new Date();

    	java.util.Date date = new Date();
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    	String datef = sdf.format( date );

	String rulename= new String( drools.getRule().getName( ) );
	Integer userid = $participant.getUserid( );
	String factname = new String( "Watch" );
	String username = new String( $participant.getUsername( ) );
	String facttxt = new String( "Weightwatcher says that for " + $gas.getGoalname( ) + ", " + username + " attained best outcome " + 
		$obscounttotal  + " times over the past 60 days" );

    ObjectMapper mapper = new ObjectMapper();
    ObjectNode node = mapper.createObjectNode();
    node.put("userid", userid);
    node.put("obsvalue", $obscounttotal.intValue());
    node.put("facttxt", rulename);
    System.out.println(node.toString());

	Fact $fact = new Fact( );
	$fact.setFactid( 999 );
	$fact.setFacttype ( 0 );
	$fact.setFactname( factname );
	$fact.setFacttxt( facttxt );
	$fact.setFactjson( node.toString( ) );
	insert( $fact );

   	System.out.println( "==>weightwatcher " + rulename + ":" + $obscounttotal );
end

rule "ruleExpectedCount"
  	salience -100
  	no-loop true
when
    	$participant : Participant(  )
	$gas : GAS( userid == $participant.userid )
    	$obscounttotal : Number( intValue > 0) from accumulate(
      		Observation( $obscount : obsvalue >= 0, $participant.userid == userid, obsname == $gas.goalname ) over window:time( 60d ),
     		count( $obscount ) )
then
    	Date today = new Date();

    	java.util.Date date = new Date();
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    	String datef = sdf.format( date );

	String rulename= new String( drools.getRule().getName( ) );
	Integer userid = $participant.getUserid( );
	String factname = new String( "Watch" );
	String username = new String( $participant.getUsername( ) );
	String facttxt = new String( "Weightwatcher says that for " + $gas.getGoalname( ) + ", " + username + " attained expected outcome or better " + 
		$obscounttotal  + " times over the past 60 days" );

	ObjectMapper mapper = new ObjectMapper();
    ObjectNode node = mapper.createObjectNode();
    node.put("userid", userid);
    node.put("obsvalue", $obscounttotal.intValue());
    node.put("facttxt", rulename);
    System.out.println(node.toString());

	Fact $fact = new Fact( );
	$fact.setFactid( 999 );
	$fact.setFacttype ( 0 );
	$fact.setFactname( factname );
	$fact.setFacttxt( facttxt );
	$fact.setFactjson( node.toString( ) );
	insert( $fact );

   	System.out.println( "==>weightwatcher" + rulename + ":" + $obscounttotal );
end